name: Nx Cloud Agents

on:
  workflow_call:
    inputs:
      number-of-agents:
        required: true
        type: number
      node-version:
        required: false
        type: string
      yarn-version:
        required: false
        type: string
      npm-version:
        required: false
        type: string
      install-command:
        required: false
        type: string

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true

jobs:
  set-agents:
    runs-on: ubuntu-latest
    name: Init
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        # Turn the number-of-agents input into a JSON structure which is compatible with a Github job matrix strategy
        run: |
          AGENTS_JSON_ARRAY=$(node -e "console.log(JSON.stringify(Array.from(new Array(${{ inputs.number-of-agents }})).map((_, i) => i + 1)));")
          echo $AGENTS_JSON_ARRAY
          echo "::set-output name=matrix::$AGENTS_JSON_ARRAY"

  # Intentionally using capital letter in order to make the Github UI for the matrix look better
  Run:
    needs: set-agents
    runs-on: ubuntu-latest
    name: Agent ${{ matrix.agent }}
    strategy:
      matrix:
        agent:
          - ${{fromJson(needs.set-agents.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2

      # Set node/npm/yarn versions using volta, with optional overrides provided by the consumer
      - uses: volta-cli/action@fdf4cf319494429a105efaa71d0e5ec67f338c6e
        with:
          node-version: "${{ inputs.node-version }}"
          npm-version: "${{ inputs.npm-version }}"
          yarn-version: "${{ inputs.yarn-version }}"

      - name: Print node/npm/yarn versions
        id: versions
        run: |
          node_ver=$( node --version )
          yarn_ver=$( yarn --version || true )

          echo "Node: ${node_ver:1}"
          echo "NPM: $( npm --version )"
          if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi

          echo "::set-output name=node_version::${node_ver:1}"
          echo "::set-output name=use_yarn::$([[ -f ./yarn.lock ]] && echo "true" || echo "false")"

      - name: Use the node_modules cache if available [npm]
        if: steps.versions.outputs.use_yarn != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Get yarn cache directory path
        if: steps.versions.outputs.use_yarn == 'true'
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use the node_modules cache if available [yarn]
        if: steps.versions.outputs.use_yarn == 'true'
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-

      - name: Install dependencies
        run: |
          if [ -n "${{ inputs.install-command }}" ]; then
            echo "Running custom install-command: ${{ inputs.install-command }}"
            ${{ inputs.install-command }}
          elif [ "${{ steps.versions.outputs.use_yarn }}" == "true" ]; then
            echo "Running yarn install --frozen-lockfile"
            yarn install --frozen-lockfile
          else
            echo "Running npm ci"
            npm ci
          fi

      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent
