name: 'Setup Package manager'
description: 'Action to setup the package manager used in the project'
inputs:
  node-version:
    description: NodeJs version
    required: false
  npm-version:
    description: NPM version
    required: false
  pnpm-version:
    description: PNPM version
    required: false
  yarn-version:
    description: Yarn version
    required: false
outputs:
  name:
    description: 'the name of the package manager'
    value: ${{ steps.package_manager.outputs.name }}
runs:
  using: 'composite'
  steps:
    - name: Detect package manager
      id: package_manager
      run: |
        echo "name=$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")" >> $GITHUB_OUTPUT

    # Set node/npm/yarn versions using volta, with optional overrides provided by the consumer
    - uses: volta-cli/action@v4
      with:
        node-version: "${{ inputs.node-version }}"
        npm-version: "${{ inputs.npm-version }}"
        yarn-version: "${{ inputs.yarn-version }}"

    # Install pnpm with exact version provided by consumer or fallback to latest
    - name: Install PNPM
      if: steps.package_manager.outputs.name == 'pnpm'
      uses: pnpm/action-setup@v2.2.2
      with:
        version: ${{ inputs.pnpm-version || 'latest' }}

    - name: Print node/npm/yarn versions
      id: versions
      run: |
        node_ver=$( node --version )
        yarn_ver=$( yarn --version || true )
        pnpm_ver=$( pnpm --version || true )
        
        echo "Node: ${node_ver:1}"
        echo "NPM: $( npm --version )"
        if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi
        if [[ $pnpm_ver != '' ]]; then echo "PNPM: $pnpm_ver"; fi
        
        echo "node_version=${node_ver:1}" >> $GITHUB_OUTPUT
        echo "yarn_version=${yarn_ver}" >> $GITHUB_OUTPUT

    - name: Use the node_modules cache if available [npm]
      if: steps.package_manager.outputs.name == 'npm'
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

    - name: Get pnpm cache directory path
      if: steps.package_manager.outputs.name == 'pnpm'
      id: pnpm-cache-dir-path
      run: echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Use the node_modules cache if available [pnpm]
      if: steps.package_manager.outputs.name == 'pnpm'
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

    - name: Get yarn cache directory path [yarn 1.x]
      if: steps.package_manager.outputs.name == 'yarn' && startsWith(steps.versions.outputs.yarn_version, '1.')
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

    - name: Use the node_modules cache if available [yarn 1.x]
      if: steps.package_manager.outputs.name == 'yarn' && startsWith(steps.versions.outputs.yarn_version, '1.')
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-

    - name: Get yarn cache directory path [yarn berry]
      if: steps.package_manager.outputs.name == 'yarn' && !startsWith(steps.versions.outputs.yarn_version, '1.')
      id: yarn-berry-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - name: Use the node_modules cache if available [yarn berry]
      if: steps.package_manager.outputs.name == 'yarn' && !startsWith(steps.versions.outputs.yarn_version, '1.')
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-berry-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-berry-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-berry-
